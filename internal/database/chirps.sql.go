/*
 * Copyright 2025 Merlinux-source
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearChirps = `-- name: ClearChirps :exec
DELETE
FROM chirps
`

func (q *Queries) ClearChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearChirps)
	return err
}

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (body, user_id)
VALUES ($1, $2) RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE
FROM chirps
WHERE id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, id)
	return err
}

const getChirpById = `-- name: GetChirpById :one
SELECT id, created_at, updated_at, body, user_id
FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirpById(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpById, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getChirpsByUserId = `-- name: GetChirpsByUserId :many
SELECT id, created_at, updated_at, body, user_id
FROM chirps
WHERE user_id = $1
`

func (q *Queries) GetChirpsByUserId(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChrips = `-- name: GetChrips :many
SELECT id, created_at, updated_at, body, user_id
FROM chirps
ORDER BY created_at ASC
`

func (q *Queries) GetChrips(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChripsByUserIdFromTo = `-- name: GetChripsByUserIdFromTo :many
SELECT id, created_at, updated_at, body, user_id
FROM chirps
WHERE user_id = $1
  AND updated_at BETWEEN $2 AND $3
`

type GetChripsByUserIdFromToParams struct {
	UserID      uuid.UUID `json:"user_id"`
	UpdatedAt   time.Time `json:"updated_at"`
	UpdatedAt_2 time.Time `json:"updated_at_2"`
}

func (q *Queries) GetChripsByUserIdFromTo(ctx context.Context, arg GetChripsByUserIdFromToParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChripsByUserIdFromTo, arg.UserID, arg.UpdatedAt, arg.UpdatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChripsFromTo = `-- name: GetChripsFromTo :many
SELECT id, created_at, updated_at, body, user_id
FROM chirps
WHERE updated_at BETWEEN $1 AND $2
`

type GetChripsFromToParams struct {
	UpdatedAt   time.Time `json:"updated_at"`
	UpdatedAt_2 time.Time `json:"updated_at_2"`
}

func (q *Queries) GetChripsFromTo(ctx context.Context, arg GetChripsFromToParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChripsFromTo, arg.UpdatedAt, arg.UpdatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
